import React, { useState, useEffect, useRef, useCallback } from 'react';
import './TapGame.css';
import characterImage from '../../../assets/images/ass.webp';
import arrowLeft from '../../../assets/icon/arrow-left.svg'; // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∏–∫–æ–Ω–∫—É

const TapGame = ({ onBack }) => {
  const canvasRef = useRef(null);

  // 1.1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞ –∞–º–æ—Ä–∏—Ç–æ–≤
  const [amoritBalance, setAmoritBalance] = useState(
    parseInt(localStorage.getItem('amoritBalance'), 10) || 0
  );

  const [tapsRemaining, setTapsRemaining] = useState(() => {
    const savedTaps = localStorage.getItem('tapsRemaining');
    return savedTaps !== null ? parseInt(savedTaps, 10) : 100;
  });

  const [isSessionActive, setIsSessionActive] = useState(true);
  const [isCooldownActive, setIsCooldownActive] = useState(
    () => JSON.parse(localStorage.getItem('isCooldownActive')) || false
  );

  const [cooldownTime, setCooldownTime] = useState(() => {
    const savedCooldownEnd = localStorage.getItem('cooldownEnd');
    if (savedCooldownEnd) {
      const remainingTime = Math.floor((new Date(savedCooldownEnd) - new Date()) / 1000);
      return remainingTime > 0 ? remainingTime : 0;
    }
    return 8 * 3600; // 8 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  });

  const [hasWon, setHasWon] = useState(false);
  const savedAlpha = parseFloat(localStorage.getItem('overlayAlpha')) || 0;

  // 1.2: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ LocalStorage
  const updateAmoritBalance = (amount) => {
    const newBalance = amoritBalance + amount;
    setAmoritBalance(newBalance);
    localStorage.setItem('amoritBalance', newBalance);
  };

  // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –ø–æ–±–µ–¥–µ –≤ –∏–≥—Ä–µ
  const handleWin = () => {
    updateAmoritBalance(50); // –ó–∞—á–∏—Å–ª—è–µ–º 50 –∞–º–æ—Ä–∏—Ç–æ–≤ –∑–∞ 100 —Ç–∞–ø–æ–≤
  };

  const resizeCanvas = useCallback(() => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    const size = Math.min(canvas.parentElement.offsetWidth, 400);
    canvas.width = size;
    canvas.height = size;

    const image = new Image();
    image.src = characterImage;
    image.onload = () => {
      ctx.drawImage(image, 0, 0, canvas.width, canvas.height);
      applyOverlay(savedAlpha);
    };
  }, [savedAlpha]);

  const resetGame = useCallback(() => {
    setTapsRemaining(100);
    setIsSessionActive(true);
    setHasWon(false);
    localStorage.removeItem('tapsRemaining');
    localStorage.removeItem('overlayAlpha');
    clearCanvas();
    resizeCanvas();
  }, [resizeCanvas]);

  const clearCanvas = () => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    if (ctx) ctx.clearRect(0, 0, canvas.width, canvas.height);
  };

  useEffect(() => {
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);
    return () => window.removeEventListener('resize', resizeCanvas);
  }, [resizeCanvas]);

  useEffect(() => {
    localStorage.setItem('tapsRemaining', tapsRemaining);
  }, [tapsRemaining]);

  useEffect(() => {
    localStorage.setItem('isCooldownActive', JSON.stringify(isCooldownActive));
  }, [isCooldownActive]);

  useEffect(() => {
    if (cooldownTime > 0 && isCooldownActive) {
      const interval = setInterval(() => {
        setCooldownTime((prev) => {
          if (prev <= 1) {
            clearInterval(interval);
            resetGame();
            setIsCooldownActive(false);
            return 8 * 3600;
          }
          return prev - 1;
        });
      }, 1000);

      return () => clearInterval(interval);
    }
  }, [isCooldownActive, cooldownTime, resetGame]);

  const handleTap = (e) => {
    if (isSessionActive && tapsRemaining > 0) {
      const newTapsRemaining = tapsRemaining - 1;
      setTapsRemaining(newTapsRemaining);

      const newAlpha = (100 - newTapsRemaining) * 0.005;
      localStorage.setItem('overlayAlpha', newAlpha);

      showFloatingPlusOne(e);
      applyOverlay(newAlpha);

      if (newTapsRemaining === 0) {
        setHasWon(true);
        setIsSessionActive(false);
        handleWin(); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–±–µ–¥—ã
        startCooldown();
      }
    }
  };

  const showFloatingPlusOne = (e) => {
    const plusOne = document.createElement('div');
    plusOne.className = 'floating-plus-one';
    plusOne.textContent = '+1';
    plusOne.style.left = `${e.clientX}px`;
    plusOne.style.top = `${e.clientY}px`;
    document.body.appendChild(plusOne);
    setTimeout(() => plusOne.remove(), 1500);
  };

  const applyOverlay = (alpha) => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');

    if (!ctx) {
      console.error('–ö–æ–Ω—Ç–µ–∫—Å—Ç Canvas –Ω–µ –Ω–∞–π–¥–µ–Ω!');
      return;
    }

    const overlayX = canvas.width * 0.4;
    const overlayY = canvas.height * 0.65;
    const radius = canvas.width * 0.5;

    const gradient = ctx.createRadialGradient(
      overlayX, overlayY, 0,
      overlayX, overlayY, radius
    );

    gradient.addColorStop(0, `rgba(255, 0, 0, ${alpha})`);
    gradient.addColorStop(0.5, `rgba(255, 0, 0, ${alpha / 2})`);
    gradient.addColorStop(1, `rgba(255, 0, 0, 0)`);

    ctx.fillStyle = gradient;
    ctx.beginPath();
    ctx.arc(overlayX, overlayY, radius, 0, 2 * Math.PI);
    ctx.fill();
  };

  const startCooldown = () => {
    setIsCooldownActive(true);
    const cooldownEnd = new Date(Date.now() + 8 * 3600 * 1000);
    localStorage.setItem('cooldownEnd', cooldownEnd.toISOString());
  };

  const resetCooldownAndGame = () => {
    resetGame();
    setIsCooldownActive(false);
    setCooldownTime(8 * 3600);
    localStorage.removeItem('cooldownEnd');
  };

  const formatTime = (seconds) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${hours}—á ${minutes}–º ${secs}—Å`;
  };

  return (
    <div className="tap-game">
      <img
        src={arrowLeft}
        alt="–ù–∞–∑–∞–¥"
        className="back-button"
        onClick={onBack}
      />
      <h2>–¢–∞–ø–∞–π –ø–æ –ø–æ–ø–∫–µ –∏&#160;–∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π&#160;–∞–º–æ—Ä–∏—Ç—ã!</h2>
      <h3>ü™ô {amoritBalance} - –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å</h3>
      <div className="canvas-container">
        <canvas ref={canvasRef} className="tap-canvas" onClick={handleTap} />
      </div>
      <h4>{100 - tapsRemaining} / 100</h4>
      <div className="progress-bar">
        <div
          style={{ width: `${((100 - tapsRemaining) / 100) * 100}%` }}
          className="progress"
        />
        <span>–¢—ã –Ω–∞—Ç–∞–ø–∞–ª {100 - tapsRemaining} –∏–∑ 100!</span>
      </div>

      {!isSessionActive && hasWon && (
        <h4>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª 50 –∞–º–æ—Ä–∏—Ç–æ–≤ –∑–∞ —Å–≤–æ–∏ 100 —Ç–∞–ø–æ–≤!</h4>
      )}

      {isCooldownActive && (
        <>
          <h4>–¢—ã —Å–º–æ–∂–µ—à—å —Å–Ω–æ–≤–∞ —Ç–∞–ø–∞—Ç—å —á–µ—Ä–µ–∑:</h4>
          <h4>{formatTime(cooldownTime)}</h4>
        </>
      )}

      <button className="reset-button" onClick={resetCooldownAndGame}>
        –°–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä –∏ –∏–≥—Ä—É
      </button>
    </div>
  );
};

export default TapGame;
